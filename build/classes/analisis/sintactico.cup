package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Incremento;
import instrucciones.Decremento;

//expresiones
import expresiones.Nativo;
import expresiones.OperadoresAritmeticos;
import expresiones.Aritmeticas;
import expresiones.OperadoresRelacionales;
import expresiones.Relacionales;
import excepciones.Errores;
import expresiones.AccesoVar;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("Sintactico Recuperable", "No se esperaba el componente"+s.value,s.left,s.right));
        ManejoErrores.Error.GuardarError(String.valueOf(s.value),"Error Sintactico Recuperable: Carácter no esperado",String.valueOf(s.left),String.valueOf(s.right));    
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("Sintactico No Recuperables", "No se esperaba el componente"+s.value,s.left,s.right)); 
        ManejoErrores.Error.GuardarError(String.valueOf(s.value),"Error Sintactico No recuperable: Carácter no esperado",String.valueOf(s.left),String.valueOf(s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, CARACTER, ID, CONST, VAR, DOSPUNTOS,INCREMENTO, DECREMENTO;
terminal FINCADENA, IMPRIMIR, INT, DOUBLE, STRING, CHAR,MULT,DIV,POTENCIA,MODULO;
terminal PAR1, PAR2, MAS,MENOS,UMENOS;
terminal IGUAL, EQUALS,DIFERENTE,MAYOR,MENORIGUAL,MAYORIGUAL,NOT,AND,OR;
terminal TRUE, FALSE, IF, BOOL;
terminal LLAVE1, LLAVE2;
terminal FOR, MENOR;
terminal String BREAK;

//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion BREAKK;
nonterminal Tipo TIPOS;
nonterminal String MUTA;
nonterminal Instruccion EXPRESION;

precedence left OR,AND;
precedence right NOT;
precedence left EQUALS ,MENOR,DIFERENTE,MENORIGUAL,MAYORIGUAL,MAYOR,MENOR;
precedence left MAS,MENOS;
precedence left MULT,DIV,POTENCIA,MODULO;
precedence right UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a {:   RESULT = a;   :} 
                | DECLARACION:a {:   RESULT = a;   :}
                | ASIGNACION:a        {:   RESULT=a;   :}
                | SIF:a               {:   RESULT=a;   :}
                | CFOR:a              {:   RESULT=a;   :}
                | BREAKK:a            {:   RESULT=a;   :}
                | error FINCADENA 
                | error
;  

IMPRESION ::=  IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;
ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
               |ID:a INCREMENTO FINCADENA  {:   RESULT=new Incremento(a,aleft, aright);    :}
               |ID:a DECREMENTO FINCADENA  {:   RESULT=new Decremento(a,aleft, aright);    :}
;
DECLARACION ::= MUTA:d ID:b DOSPUNTOS TIPOS:a FINCADENA    {:   RESULT = new Declaracion(b,new Nativo("", new Tipo(tipoDato.CARACTER), aleft, aright ),a,d ,aleft, aright);   :}
                |MUTA:d ID:b DOSPUNTOS TIPOS:a  IGUAL EXPRESION:c FINCADENA    {:   RESULT = new Declaracion(b, c, a,d ,aleft, aright);   :}
;
MUTA ::= VAR {:RESULT="var";:}
        |CONST {:RESULT="const";:}
;
SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new If(a, b, aleft, aright);   :}
;
CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
    |FOR PAR1 DECLARACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;
TIPOS ::= INT       {:   RESULT=new Tipo(tipoDato.ENTERO);   :}
        | DOUBLE    {:   RESULT=new Tipo(tipoDato.DECIMAL);   :}
        | STRING    {:   RESULT=new Tipo(tipoDato.CADENA);   :}
        | BOOL      {:   RESULT=new Tipo(tipoDato.BOOLEANO);   :}
        | CHAR      {:   RESULT=new Tipo(tipoDato.CARACTER);   :}
;            

EXPRESION ::= MENOS EXPRESION:a {: RESULT = new Aritmeticas(a,OperadoresAritmeticos.NEGACION, aleft, aright); :}%prec UMENOS
            | EXPRESION:a MAS EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MULT EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a POTENCIA EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a MODULO EXPRESION:b {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);    :}%prec EQUALS
            | EXPRESION:a DIFERENTE EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.DIFERENTE, aleft, aright);    :}
            | EXPRESION:a MENOR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);    :}
            | EXPRESION:a MAYOR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright);    :}
            | EXPRESION:a MENORIGUAL EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENORIGUAL, aleft, aright);    :}
            | EXPRESION:a MAYORIGUAL EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYORIGUAL, aleft, aright);    :}
            | EXPRESION:a AND EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.AND, aleft, aright);    :}
            | EXPRESION:a OR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.OR, aleft, aright);    :}
            | NOT EXPRESION:a     {:    RESULT = new Relacionales(a,OperadoresRelacionales.NOT, aleft, aright);    :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   :}
            | CARACTER:a    {:   RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright );   :}
            | ID:a          {:   RESULT = new AccesoVar(a, aleft, aright);   :}
            | TRUE:a        {:   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    :}
            | PAR1 EXPRESION:a PAR2     {:   RESULT = a;   :}
;