package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import IntruccionAbstracta.Instruccion;
import Simbolo.Tipo;
import Simbolo.TipoDeDato;
import Errores.Errores;


import Instrucciones.Prinln;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVariable;
import Instrucciones.If;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.While;
import Instrucciones.IfElse;
import Instrucciones.Elif;
import Instrucciones.Match;
import Instrucciones.ObjetoMatch;
import Instrucciones.MatchDefault;
import Instrucciones.Default;
import Instrucciones.DoWhile;
import Instrucciones.Decremento;
import Instrucciones.Incremento;
import Instrucciones.Casteo;
import Instrucciones.CasteoAsignacion;
import Instrucciones.DeclaracionPorDefecto;


import Expresiones.DatoNativo;
import Expresiones.OperacionesAritmeticas;
import Expresiones.SimbolosAritmeticos;
import Expresiones.SimbolosRelacionales;
import Expresiones.OperacionesRelacionales;
import Expresiones.AccesoVariable;

parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

:}

action code
{:
:}

terminal String STRING, INT, DOUBLE, ID, CHAR;
terminal PYC,DOSPUNTOS,PRINT, ENTERO,DECIMAL,CADENA,TRUE,FALSE,IF,BOOL,CARACTERES,VAR,CONST;
terminal PARIZQ, PARDER, MAS, MENOS, UMENOS,SQUARE,MENORIGUAL,MAYORIGUAL, IGUAL,EQUAL,MULTIPLICACION,DIVISION,MODULO,NEGACION,NOTEQUALS,OR,AND,XOR,NOT,COR,CAND;
terminal LLAVEIZQ, LLAVEDER;
terminal FOR, MENOR,WHILE,ELSE,MATCH,MAYOR,BARRA,DO;
terminal String BREAK;

nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION, PRINTLN,DECLARACION, ASIGNACION,DECREMENTO,INCREMENTO;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion SIF;
nonterminal Instruccion CFOR,ACTUALIZAR_FOR;
nonterminal Instruccion CBREAK;
nonterminal Instruccion CWHILE;
nonterminal Instruccion CMATCH;
nonterminal Instruccion CDOWHILE, CASTEO;
nonterminal LinkedList<ObjetoMatch> INSTRUCCIONESMATCH;
nonterminal ObjetoMatch SENTENCIASMATCH;
nonterminal Tipo TIPOSVALORES;
nonterminal String TIPOMUTABILIDAD;

precedence left COR;
precedence left CAND;
precedence left XOR;
precedence left NOT;
precedence left EQUAL,MENOR,NOTEQUALS,MAYOR,MAYORIGUAL,MENORIGUAL;
precedence left MAS,MENOS;
precedence left MULTIPLICACION,DIVISION;
precedence left MODULO;
precedence nonassoc SQUARE;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= PRINTLN:a {: RESULT=a; :}
                |DECLARACION:a {: RESULT=a; :}
                |ASIGNACION:a {: RESULT=a; :}
                |SIF:a        {:   RESULT=a;   :}
                |CFOR:a       {:   RESULT=a;   :}
                |CBREAK:a     {: RESULT=a; :}
                |CWHILE:a     {: RESULT=a; :}
                |CMATCH:a     {: RESULT=a; :}
                |CDOWHILE:a   {: RESULT=a; :}
                |INCREMENTO:a {: RESULT=a; :}
                |DECREMENTO:a {: RESULT=a; :}
                |CASTEO:a     {: RESULT=a; :}
                |error PYC
                |error
;

PRINTLN ::= PRINT PARIZQ EXPRESION:a PARDER PYC      {:   RESULT = new Prinln(a, aleft, aright);   :}
;

DECLARACION ::= TIPOMUTABILIDAD:d ID:b DOSPUNTOS TIPOSVALORES:a IGUAL EXPRESION:c PYC    {:   RESULT = new Declaracion(b, c, a, d,aleft, aright);   :}
               |TIPOMUTABILIDAD:c ID:b DOSPUNTOS TIPOSVALORES:a PYC    {:   RESULT = new DeclaracionPorDefecto(b,a,c,aleft, aright);   :}
;
ASIGNACION ::= ID:a IGUAL EXPRESION:b PYC  {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
              |ID:a IGUAL PARIZQ TIPOSVALORES:b PARDER EXPRESION:c PYC {:   RESULT = new CasteoAsignacion(a, c, b,aleft, aright);   :}
;
CASTEO ::= TIPOMUTABILIDAD:e ID:b DOSPUNTOS TIPOSVALORES:a IGUAL PARIZQ TIPOSVALORES:d PARDER EXPRESION:c PYC    {:   RESULT = new Casteo(b, c, d, a, e,aleft, aright);   :}
;
SIF ::= IF PARIZQ EXPRESION:a PARDER LLAVEIZQ INSTRUCCIONES:b LLAVEDER  {:   RESULT = new If(a, b, aleft, aright);   :}
       |IF PARIZQ EXPRESION:a PARDER LLAVEIZQ INSTRUCCIONES:b LLAVEDER ELSE LLAVEIZQ INSTRUCCIONES:c LLAVEDER  {:   RESULT = new IfElse(a,b,c,aleft, aright);   :}
       |IF PARIZQ EXPRESION:a PARDER LLAVEIZQ INSTRUCCIONES:b LLAVEDER ELSE SIF:c  {:   RESULT = new Elif(a,b,c,aleft, aright);    :}
;

CMATCH ::= MATCH EXPRESION:a LLAVEIZQ INSTRUCCIONESMATCH:b LLAVEDER {: RESULT= new Match(a,b,aleft,aright); :}
          |MATCH EXPRESION:a LLAVEIZQ INSTRUCCIONESMATCH:b BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES:c LLAVEDER LLAVEDER {: RESULT= new MatchDefault(a,b,c,aleft,aright); :}
          |MATCH EXPRESION LLAVEIZQ BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES:a LLAVEDER LLAVEDER {: RESULT= new Default(a,aleft,aright); :}
;
INSTRUCCIONESMATCH::=INSTRUCCIONESMATCH:a SENTENCIASMATCH:b {: RESULT = a; RESULT.add(b); :}
                    |SENTENCIASMATCH:a {: RESULT = new LinkedList<>(); RESULT.add(a);  :}
;
SENTENCIASMATCH::= EXPRESION:a IGUAL MAYOR LLAVEIZQ INSTRUCCIONES:b LLAVEDER {: RESULT= new ObjetoMatch(a,b); :}
;
CWHILE::= WHILE PARIZQ EXPRESION:a PARDER LLAVEIZQ INSTRUCCIONES:b LLAVEDER  {:   RESULT = new While(a, b, aleft, aright);   :}
;
CDOWHILE::= DO LLAVEIZQ INSTRUCCIONES:a LLAVEDER WHILE PARIZQ EXPRESION:b PARDER PYC {:   RESULT = new DoWhile(b, a, aleft, aright);   :}
;
CFOR ::= FOR PARIZQ ASIGNACION:a EXPRESION:b PYC ACTUALIZAR_FOR:c PARDER LLAVEIZQ INSTRUCCIONES:d LLAVEDER     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;
ACTUALIZAR_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVariable(a, b, aleft, aright);  :}
                  |ID:a MAS MAS {: RESULT=new Incremento(a,aleft, aright); :}
                  |ID:a MENOS MENOS {: RESULT=new Decremento(a,aleft, aright); :}
;

INCREMENTO ::= ID:a MAS MAS {: RESULT=new Incremento(a,aleft, aright); :}
;
DECREMENTO ::= ID:a MENOS MENOS {: RESULT=new Decremento(a,aleft, aright); :}
;
CBREAK ::= BREAK:a PYC      {:    RESULT = new Break(aleft, aright);     :}
;
TIPOSVALORES ::= ENTERO       {:   RESULT=new Tipo(TipoDeDato.INT);   :}
        | DECIMAL    {:   RESULT=new Tipo(TipoDeDato.DOUBLE);   :}
        | CADENA    {:   RESULT=new Tipo(TipoDeDato.STRING);   :}
        | BOOL      {:   RESULT=new Tipo(TipoDeDato.BOOLEAN);   :}
        | CARACTERES  {:   RESULT=new Tipo(TipoDeDato.CHAR);   :}
;
TIPOMUTABILIDAD ::= VAR:a {: RESULT=a.toString(); :}
                   |CONST:a {: RESULT=a.toString(); :}
;
EXPRESION ::= MENOS EXPRESION:a {: RESULT= new OperacionesAritmeticas(a, SimbolosAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIVISION EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a MULTIPLICACION MULTIPLICACION EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.POTENCIA, aleft, aright); :} %prec SQUARE
            | EXPRESION:a MODULO EXPRESION:b {: RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.IGUAL,aleft,aright); :} %prec EQUAL
            | EXPRESION:a NEGACION IGUAL EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.NOIGUAL,aleft,aright); :} %prec NOTEQUALS
            | EXPRESION:a MENOR EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENOR,aleft,aright); :}
            | EXPRESION:a MAYOR EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYOR,aleft,aright); :}
            | EXPRESION:a MAYOR IGUAL EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYORIGUAL,aleft,aright); :} %prec MAYORIGUAL
            | EXPRESION:a MENOR IGUAL EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENORIGUAL,aleft,aright); :} %prec MENORIGUAL
            | EXPRESION:a AND AND EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.AND,aleft,aright); :} %prec CAND
            | EXPRESION:a OR OR EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.OR,aleft,aright); :} %prec COR
            | EXPRESION:a XOR EXPRESION:b {: RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.XOR,aleft,aright); :}
            | NEGACION EXPRESION:a {: RESULT= new OperacionesRelacionales(a,SimbolosRelacionales.NOT,aleft,aright); :} %prec NOT
            | INT:a      {:   RESULT = new DatoNativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright );   :}
            | DOUBLE:a     {:   RESULT = new DatoNativo(new Double(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );   :}
            | STRING:a      {:   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );   :}
            | TRUE:a        {:   RESULT = new DatoNativo(true, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new DatoNativo(false, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   :}
            | ID:a          {:   RESULT = new AccesoVariable(a, aleft, aright);   :}
            | CHAR:a        {:   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );   :}
            | PARIZQ EXPRESION:a PARDER {: RESULT=a; :}
;
