
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import IntruccionAbstracta.Instruccion;
import Simbolo.Tipo;
import Simbolo.TipoDeDato;
import Errores.Errores;
import Instrucciones.Prinln;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVariable;
import Instrucciones.If;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.While;
import Instrucciones.IfElse;
import Instrucciones.Elif;
import Instrucciones.Match;
import Instrucciones.ObjetoMatch;
import Expresiones.DatoNativo;
import Expresiones.OperacionesAritmeticas;
import Expresiones.SimbolosAritmeticos;
import Expresiones.SimbolosRelacionales;
import Expresiones.OperacionesRelacionales;
import Expresiones.AccesoVariable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\005\007\000\002\006" +
    "\007\000\002\007\006\000\002\011\011\000\002\011\015" +
    "\000\002\011\013\000\002\016\007\000\002\017\004\000" +
    "\002\017\003\000\002\020\010\000\002\015\011\000\002" +
    "\012\014\000\002\013\005\000\002\014\004\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\010\004\000\002\010\005\000\002\010\006\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\032\003\024\007\016\011\023\012\030\013" +
    "\007\014\006\017\015\020\026\032\031\034\010\036\032" +
    "\040\022\001\002\000\004\007\142\001\002\000\036\002" +
    "\ufffe\003\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\017\ufffe\020\ufffe\031\ufffe\032\ufffe\034\ufffe\036\ufffe\040" +
    "\ufffe\001\002\000\004\007\uffe3\001\002\000\004\007\uffe4" +
    "\001\002\000\004\021\134\001\002\000\036\002\ufff8\003" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\017\ufff8" +
    "\020\ufff8\031\ufff8\032\ufff8\034\ufff8\036\ufff8\040\ufff8\001" +
    "\002\000\036\002\ufffc\003\ufffc\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\017\ufffc\020\ufffc\031\ufffc\032\ufffc\034" +
    "\ufffc\036\ufffc\040\ufffc\001\002\000\036\002\ufffa\003\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\017\ufffa\020" +
    "\ufffa\031\ufffa\032\ufffa\034\ufffa\036\ufffa\040\ufffa\001\002" +
    "\000\034\002\000\003\024\007\016\011\023\012\030\013" +
    "\007\014\006\017\015\020\026\032\031\034\010\036\032" +
    "\040\022\001\002\000\004\021\121\001\002\000\004\026" +
    "\116\001\002\000\036\002\ufff6\003\ufff6\007\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\017\ufff6\020\ufff6\031\ufff6\032" +
    "\ufff6\034\ufff6\036\ufff6\040\ufff6\001\002\000\036\002\ufffb" +
    "\003\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\017" +
    "\ufffb\020\ufffb\031\ufffb\032\ufffb\034\ufffb\036\ufffb\040\ufffb" +
    "\001\002\000\036\002\ufffd\003\ufffd\007\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\014\ufffd\017\ufffd\020\ufffd\031\ufffd\032\ufffd" +
    "\034\ufffd\036\ufffd\040\ufffd\001\002\000\004\010\115\001" +
    "\002\000\004\021\111\001\002\000\040\002\ufff4\003\ufff4" +
    "\007\ufff4\010\110\011\ufff4\012\ufff4\013\ufff4\014\ufff4\017" +
    "\ufff4\020\ufff4\031\ufff4\032\ufff4\034\ufff4\036\ufff4\040\ufff4" +
    "\001\002\000\036\002\ufff7\003\ufff7\007\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\017\ufff7\020\ufff7\031\ufff7\032\ufff7" +
    "\034\ufff7\036\ufff7\040\ufff7\001\002\000\004\007\uffe2\001" +
    "\002\000\036\002\ufff9\003\ufff9\007\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\017\ufff9\020\ufff9\031\ufff9\032\ufff9\034" +
    "\ufff9\036\ufff9\040\ufff9\001\002\000\004\007\uffe5\001\002" +
    "\000\004\021\074\001\002\000\022\004\040\005\035\006" +
    "\041\007\044\015\037\016\042\021\043\024\036\001\002" +
    "\000\004\002\034\001\002\000\004\002\001\001\002\000" +
    "\016\010\uffdd\022\uffdd\023\uffdd\026\uffdd\030\uffdd\033\uffdd" +
    "\001\002\000\022\004\040\005\035\006\041\007\044\015" +
    "\037\016\042\021\043\024\036\001\002\000\016\010\uffda" +
    "\022\uffda\023\uffda\026\uffda\030\uffda\033\uffda\001\002\000" +
    "\016\010\uffdb\022\uffdb\023\uffdb\026\uffdb\030\uffdb\033\uffdb" +
    "\001\002\000\016\010\uffdc\022\uffdc\023\uffdc\026\uffdc\030" +
    "\uffdc\033\uffdc\001\002\000\016\010\uffd9\022\uffd9\023\uffd9" +
    "\026\uffd9\030\uffd9\033\uffd9\001\002\000\022\004\040\005" +
    "\035\006\041\007\044\015\037\016\042\021\043\024\036" +
    "\001\002\000\016\010\uffd8\022\uffd8\023\uffd8\026\uffd8\030" +
    "\uffd8\033\uffd8\001\002\000\012\023\046\026\047\030\050" +
    "\033\051\001\002\000\022\004\040\005\035\006\041\007" +
    "\044\015\037\016\042\021\043\024\036\001\002\000\004" +
    "\026\057\001\002\000\022\004\040\005\035\006\041\007" +
    "\044\015\037\016\042\021\043\024\036\001\002\000\022" +
    "\004\040\005\035\006\041\007\044\015\037\016\042\021" +
    "\043\024\036\001\002\000\016\010\uffde\022\uffde\023\046" +
    "\026\uffde\030\uffde\033\uffde\001\002\000\024\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\015\uffeb\016\uffeb\021\uffeb\024\uffeb" +
    "\031\uffeb\001\002\000\024\004\040\005\035\006\041\007" +
    "\044\015\037\016\042\021\043\024\036\031\067\001\002" +
    "\000\010\023\046\026\056\033\051\001\002\000\006\026" +
    "\057\037\060\001\002\000\022\004\040\005\035\006\041" +
    "\007\044\015\037\016\042\021\043\024\036\001\002\000" +
    "\004\030\061\001\002\000\032\003\024\007\016\011\023" +
    "\012\030\013\007\014\006\017\015\020\026\032\031\034" +
    "\010\036\032\040\022\001\002\000\034\003\024\007\016" +
    "\011\023\012\030\013\007\014\006\017\015\020\026\031" +
    "\064\032\031\034\010\036\032\040\022\001\002\000\036" +
    "\002\uffff\003\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014" +
    "\uffff\017\uffff\020\uffff\031\uffff\032\uffff\034\uffff\036\uffff" +
    "\040\uffff\001\002\000\024\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\015\uffea\016\uffea\021\uffea\024\uffea\031\uffea\001\002" +
    "\000\016\010\uffdf\022\uffdf\023\046\026\uffdf\030\uffdf\033" +
    "\uffdf\001\002\000\024\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\015\uffec\016\uffec\021\uffec\024\uffec\031\uffec\001\002\000" +
    "\036\002\uffed\003\uffed\007\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\017\uffed\020\uffed\031\uffed\032\uffed\034\uffed\036" +
    "\uffed\040\uffed\001\002\000\016\010\uffe0\022\uffe0\023\uffe0" +
    "\026\uffe0\030\uffe0\033\uffe0\001\002\000\012\022\072\023" +
    "\046\026\047\033\051\001\002\000\016\010\uffd7\022\uffd7" +
    "\023\uffd7\026\uffd7\030\uffd7\033\uffd7\001\002\000\016\010" +
    "\uffe1\022\uffe1\023\uffe1\026\uffe1\030\uffe1\033\uffe1\001\002" +
    "\000\004\007\016\001\002\000\022\004\040\005\035\006" +
    "\041\007\044\015\037\016\042\021\043\024\036\001\002" +
    "\000\012\010\077\023\046\026\047\033\051\001\002\000" +
    "\004\007\100\001\002\000\004\026\106\001\002\000\004" +
    "\022\102\001\002\000\004\030\103\001\002\000\032\003" +
    "\024\007\016\011\023\012\030\013\007\014\006\017\015" +
    "\020\026\032\031\034\010\036\032\040\022\001\002\000" +
    "\034\003\024\007\016\011\023\012\030\013\007\014\006" +
    "\017\015\020\026\031\105\032\031\034\010\036\032\040" +
    "\022\001\002\000\036\002\uffe8\003\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\017\uffe8\020\uffe8\031\uffe8\032" +
    "\uffe8\034\uffe8\036\uffe8\040\uffe8\001\002\000\022\004\040" +
    "\005\035\006\041\007\044\015\037\016\042\021\043\024" +
    "\036\001\002\000\012\022\uffe7\023\046\026\047\033\051" +
    "\001\002\000\036\002\ufff5\003\ufff5\007\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\017\ufff5\020\ufff5\031\ufff5\032\ufff5" +
    "\034\ufff5\036\ufff5\040\ufff5\001\002\000\022\004\040\005" +
    "\035\006\041\007\044\015\037\016\042\021\043\024\036" +
    "\001\002\000\012\022\113\023\046\026\047\033\051\001" +
    "\002\000\004\010\114\001\002\000\036\002\ufff3\003\ufff3" +
    "\007\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\017\ufff3\020" +
    "\ufff3\031\ufff3\032\ufff3\034\ufff3\036\ufff3\040\ufff3\001\002" +
    "\000\036\002\uffe6\003\uffe6\007\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\017\uffe6\020\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\036\uffe6\040\uffe6\001\002\000\022\004\040\005\035\006" +
    "\041\007\044\015\037\016\042\021\043\024\036\001\002" +
    "\000\012\010\120\023\046\026\047\033\051\001\002\000" +
    "\054\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\024\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\036\ufff1\040\ufff1\001\002\000\022\004\040\005\035\006" +
    "\041\007\044\015\037\016\042\021\043\024\036\001\002" +
    "\000\012\022\123\023\046\026\047\033\051\001\002\000" +
    "\004\030\124\001\002\000\032\003\024\007\016\011\023" +
    "\012\030\013\007\014\006\017\015\020\026\032\031\034" +
    "\010\036\032\040\022\001\002\000\034\003\024\007\016" +
    "\011\023\012\030\013\007\014\006\017\015\020\026\031" +
    "\126\032\031\034\010\036\032\040\022\001\002\000\040" +
    "\002\ufff0\003\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\017\ufff0\020\ufff0\031\ufff0\032\ufff0\034\ufff0\035\127" +
    "\036\ufff0\040\ufff0\001\002\000\006\017\015\030\130\001" +
    "\002\000\032\003\024\007\016\011\023\012\030\013\007" +
    "\014\006\017\015\020\026\032\031\034\010\036\032\040" +
    "\022\001\002\000\036\002\uffee\003\uffee\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\017\uffee\020\uffee\031\uffee\032" +
    "\uffee\034\uffee\036\uffee\040\uffee\001\002\000\034\003\024" +
    "\007\016\011\023\012\030\013\007\014\006\017\015\020" +
    "\026\031\133\032\031\034\010\036\032\040\022\001\002" +
    "\000\036\002\uffef\003\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\017\uffef\020\uffef\031\uffef\032\uffef\034\uffef" +
    "\036\uffef\040\uffef\001\002\000\022\004\040\005\035\006" +
    "\041\007\044\015\037\016\042\021\043\024\036\001\002" +
    "\000\012\022\136\023\046\026\047\033\051\001\002\000" +
    "\004\030\137\001\002\000\032\003\024\007\016\011\023" +
    "\012\030\013\007\014\006\017\015\020\026\032\031\034" +
    "\010\036\032\040\022\001\002\000\034\003\024\007\016" +
    "\011\023\012\030\013\007\014\006\017\015\020\026\031" +
    "\141\032\031\034\010\036\032\040\022\001\002\000\036" +
    "\002\uffe9\003\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\017\uffe9\020\uffe9\031\uffe9\032\uffe9\034\uffe9\036\uffe9" +
    "\040\uffe9\001\002\000\004\026\143\001\002\000\022\004" +
    "\040\005\035\006\041\007\044\015\037\016\042\021\043" +
    "\024\036\001\002\000\012\010\145\023\046\026\047\033" +
    "\051\001\002\000\036\002\ufff2\003\ufff2\007\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\017\ufff2\020\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\036\ufff2\040\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\032\002\032\003\013\004\004\005\020\006" +
    "\011\007\017\011\012\012\026\014\010\015\024\016\016" +
    "\021\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\062\005\020\006\011\007\017\011\012\012\026\014\010" +
    "\015\024\016\016\021\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\067\001\001\000\002\001\001\000\010\010\054\017\053" +
    "\020\052\001\001\000\004\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\054\020\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\064\001" +
    "\001\000\002\001\001\000\030\003\061\004\004\005\020" +
    "\006\011\007\017\011\012\012\026\014\010\015\024\016" +
    "\016\021\003\001\001\000\026\004\062\005\020\006\011" +
    "\007\017\011\012\012\026\014\010\015\024\016\016\021" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\074\001\001\000\004\010\075\001\001\000" +
    "\002\001\001\000\004\013\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\103\004" +
    "\004\005\020\006\011\007\017\011\012\012\026\014\010" +
    "\015\024\016\016\021\003\001\001\000\026\004\062\005" +
    "\020\006\011\007\017\011\012\012\026\014\010\015\024" +
    "\016\016\021\003\001\001\000\002\001\001\000\004\010" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\124" +
    "\004\004\005\020\006\011\007\017\011\012\012\026\014" +
    "\010\015\024\016\016\021\003\001\001\000\026\004\062" +
    "\005\020\006\011\007\017\011\012\012\026\014\010\015" +
    "\024\016\016\021\003\001\001\000\002\001\001\000\004" +
    "\011\130\001\001\000\030\003\131\004\004\005\020\006" +
    "\011\007\017\011\012\012\026\014\010\015\024\016\016" +
    "\021\003\001\001\000\002\001\001\000\026\004\062\005" +
    "\020\006\011\007\017\011\012\012\026\014\010\015\024" +
    "\016\016\021\003\001\001\000\002\001\001\000\004\010" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\137\004\004\005\020\006\011\007\017\011\012\012" +
    "\026\014\010\015\024\016\016\021\003\001\001\000\026" +
    "\004\062\005\020\006\011\007\017\011\012\012\026\014" +
    "\010\015\024\016\016\021\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\143\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= error PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PRINTLN ::= PRINT PARIZQ EXPRESION PARDER PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prinln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TIPOSVALORES ID IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(b, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNACION ::= ID IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new IfElse(a,b,c,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Elif(a,b,c,aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CMATCH ::= MATCH EXPRESION LLAVEIZQ INSTRUCCIONESMATCH LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> b = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Match(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONESMATCH ::= INSTRUCCIONESMATCH SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> a = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch b = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCIONESMATCH ::= SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch a = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIASMATCH ::= EXPRESION IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              ObjetoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ObjetoMatch(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIASMATCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PYC ACTUALIZAR_FOR PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ACTUALIZAR_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CBREAK ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBREAK",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOSVALORES ::= ENTERO 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.INT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPOSVALORES ::= DECIMAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.DOUBLE);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOSVALORES ::= CADENA 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.STRING);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPOSVALORES ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.BOOLEAN);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, SimbolosAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.IGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= INT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= DOUBLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(new Double(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= STRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(true, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(false, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
