
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import IntruccionAbstracta.Instruccion;
import Simbolo.Tipo;
import Simbolo.TipoDeDato;
import Errores.Errores;
import Instrucciones.Prinln;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVariable;
import Instrucciones.If;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.While;
import Instrucciones.IfElse;
import Instrucciones.Elif;
import Instrucciones.Match;
import Instrucciones.ObjetoMatch;
import Instrucciones.MatchDefault;
import Instrucciones.Default;
import Instrucciones.DoWhile;
import Instrucciones.Decremento;
import Instrucciones.Incremento;
import Instrucciones.Casteo;
import Instrucciones.CasteoAsignacion;
import Instrucciones.DeclaracionPorDefecto;
import Instrucciones.Continue;
import Expresiones.DatoNativo;
import Expresiones.OperacionesAritmeticas;
import Expresiones.SimbolosAritmeticos;
import Expresiones.SimbolosRelacionales;
import Expresiones.OperacionesRelacionales;
import Expresiones.AccesoVariable;
import Expresiones.CasteoPrint;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\016\000\002\006\011\000" +
    "\002\006\007\000\002\007\006\000\002\007\011\000\002" +
    "\023\014\000\002\013\011\000\002\013\015\000\002\013" +
    "\013\000\002\021\007\000\002\021\015\000\002\021\014" +
    "\000\002\024\004\000\002\024\003\000\002\025\010\000" +
    "\002\020\011\000\002\022\013\000\002\014\014\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\011" +
    "\006\000\002\010\006\000\002\016\004\000\002\017\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\003\000\002" +
    "\027\003\000\002\012\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\006" +
    "\000\002\012\005\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\005\000\002\012\006\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\005\000\002\012\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\032\003\027\007\020\013\031\021\017\024" +
    "\037\025\030\051\035\053\007\055\036\060\021\061\025" +
    "\062\005\001\002\000\036\002\ufffe\003\ufffe\007\ufffe\013" +
    "\ufffe\021\ufffe\024\ufffe\025\ufffe\050\ufffe\051\ufffe\053\ufffe" +
    "\055\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000\004\011" +
    "\305\001\002\000\036\002\ufff8\003\ufff8\007\ufff8\013\ufff8" +
    "\021\ufff8\024\ufff8\025\ufff8\050\ufff8\051\ufff8\053\ufff8\055" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\001\002\000\004\026\277" +
    "\001\002\000\036\002\ufffc\003\ufffc\007\ufffc\013\ufffc\021" +
    "\ufffc\024\ufffc\025\ufffc\050\ufffc\051\ufffc\053\ufffc\055\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\001\002\000\004\007\263\001" +
    "\002\000\036\002\ufffa\003\ufffa\007\ufffa\013\ufffa\021\ufffa" +
    "\024\ufffa\025\ufffa\050\ufffa\051\ufffa\053\ufffa\055\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\001\002\000\034\002\000\003\027" +
    "\007\020\013\031\021\017\024\037\025\030\051\035\053" +
    "\007\055\036\060\021\061\025\062\005\001\002\000\036" +
    "\002\ufff1\003\ufff1\007\ufff1\013\ufff1\021\ufff1\024\ufff1\025" +
    "\ufff1\050\ufff1\051\ufff1\053\ufff1\055\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\001\002\000\036\002\ufff4\003\ufff4\007\ufff4\013" +
    "\ufff4\021\ufff4\024\ufff4\025\ufff4\050\ufff4\051\ufff4\053\ufff4" +
    "\055\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000\036\002" +
    "\ufff7\003\ufff7\007\ufff7\013\ufff7\021\ufff7\024\ufff7\025\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\055\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\001\002\000\004\026\250\001\002\000\010\030\242" +
    "\031\243\034\176\001\002\000\004\047\232\001\002\000" +
    "\036\002\ufff5\003\ufff5\007\ufff5\013\ufff5\021\ufff5\024\ufff5" +
    "\025\ufff5\050\ufff5\051\ufff5\053\ufff5\055\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\001\002\000\036\002\ufffb\003\ufffb\007\ufffb" +
    "\013\ufffb\021\ufffb\024\ufffb\025\ufffb\050\ufffb\051\ufffb\053" +
    "\ufffb\055\ufffb\060\ufffb\061\ufffb\062\ufffb\001\002\000\036" +
    "\002\ufffd\003\ufffd\007\ufffd\013\ufffd\021\ufffd\024\ufffd\025" +
    "\ufffd\050\ufffd\051\ufffd\053\ufffd\055\ufffd\060\ufffd\061\ufffd" +
    "\062\ufffd\001\002\000\004\011\231\001\002\000\036\002" +
    "\ufff3\003\ufff3\007\ufff3\013\ufff3\021\ufff3\024\ufff3\025\ufff3" +
    "\050\ufff3\051\ufff3\053\ufff3\055\ufff3\060\ufff3\061\ufff3\062" +
    "\ufff3\001\002\000\040\002\uffef\003\uffef\007\uffef\011\230" +
    "\013\uffef\021\uffef\024\uffef\025\uffef\050\uffef\051\uffef\053" +
    "\uffef\055\uffef\060\uffef\061\uffef\062\uffef\001\002\000\004" +
    "\007\uffce\001\002\000\004\026\213\001\002\000\036\002" +
    "\ufff6\003\ufff6\007\ufff6\013\ufff6\021\ufff6\024\ufff6\025\ufff6" +
    "\050\ufff6\051\ufff6\053\ufff6\055\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\001\002\000\036\002\ufff2\003\ufff2\007\ufff2\013\ufff2" +
    "\021\ufff2\024\ufff2\025\ufff2\050\ufff2\051\ufff2\053\ufff2\055" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002\000\036\002\ufff9" +
    "\003\ufff9\007\ufff9\013\ufff9\021\ufff9\024\ufff9\025\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\055\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\001\002\000\004\026\155\001\002\000\026\004\045\005" +
    "\042\006\046\007\051\010\054\017\044\020\050\026\047" +
    "\031\043\040\053\001\002\000\004\007\uffcf\001\002\000" +
    "\004\002\041\001\002\000\004\002\001\001\002\000\040" +
    "\011\uffbc\027\uffbc\030\uffbc\031\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\047\uffbc" +
    "\052\uffbc\056\uffbc\001\002\000\026\004\045\005\042\006" +
    "\046\007\051\010\054\017\044\020\050\026\047\031\043" +
    "\040\053\001\002\000\040\011\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\047\uffb9\052\uffb9\056\uffb9\001\002\000" +
    "\040\011\uffba\027\uffba\030\uffba\031\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\047" +
    "\uffba\052\uffba\056\uffba\001\002\000\040\011\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\047\uffbb\052\uffbb\056\uffbb" +
    "\001\002\000\026\004\045\005\042\006\046\007\051\010" +
    "\054\017\044\020\050\026\047\031\043\040\053\001\002" +
    "\000\040\011\uffb8\027\uffb8\030\uffb8\031\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\047\uffb8\052\uffb8\056\uffb8\001\002\000\040\011\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\047\uffb7\052\uffb7\056" +
    "\uffb7\001\002\000\034\030\063\031\060\034\066\035\062" +
    "\036\067\037\065\040\071\041\070\042\056\043\057\047" +
    "\120\052\061\056\064\001\002\000\026\004\045\005\042" +
    "\006\046\007\051\010\054\017\044\020\050\026\047\031" +
    "\043\040\053\001\002\000\040\011\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\047\uffb6\052\uffb6\056\uffb6\001\002" +
    "\000\040\011\uffbd\027\uffbd\030\063\031\060\034\066\035" +
    "\062\036\067\037\065\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\047\uffbd\052\061\056\064\001\002\000\004\042\116\001" +
    "\002\000\026\004\045\005\042\006\046\007\051\010\054" +
    "\017\044\020\050\026\047\031\043\040\053\001\002\000" +
    "\026\004\045\005\042\006\046\007\051\010\054\017\044" +
    "\020\050\026\047\031\043\040\053\001\002\000\030\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\034\111\040\053\001\002\000\030\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\035\106\040\053\001\002\000\026\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\040\053\001\002\000\030\004\045\005" +
    "\042\006\046\007\051\010\054\017\044\020\050\026\047" +
    "\031\043\034\102\040\053\001\002\000\026\004\045\005" +
    "\042\006\046\007\051\010\054\017\044\020\050\026\047" +
    "\031\043\040\053\001\002\000\004\034\077\001\002\000" +
    "\026\004\045\005\042\006\046\007\051\010\054\017\044" +
    "\020\050\026\047\031\043\040\053\001\002\000\004\041" +
    "\074\001\002\000\004\034\072\001\002\000\026\004\045" +
    "\005\042\006\046\007\051\010\054\017\044\020\050\026" +
    "\047\031\043\040\053\001\002\000\040\011\uffc5\027\uffc5" +
    "\030\063\031\060\034\uffc5\035\062\036\067\037\065\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\047\uffc5\052\uffc5\056\uffc5" +
    "\001\002\000\026\004\045\005\042\006\046\007\051\010" +
    "\054\017\044\020\050\026\047\031\043\040\053\001\002" +
    "\000\040\011\uffbf\027\uffbf\030\063\031\060\034\066\035" +
    "\062\036\067\037\065\040\uffbf\041\uffbf\042\uffbf\043\057" +
    "\047\uffbf\052\061\056\064\001\002\000\040\011\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\034\uffc9\035\uffc9\036\uffc9\037\065" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\047\uffc9\052\uffc9\056" +
    "\uffc9\001\002\000\026\004\045\005\042\006\046\007\051" +
    "\010\054\017\044\020\050\026\047\031\043\040\053\001" +
    "\002\000\040\011\uffc6\027\uffc6\030\063\031\060\034\uffc6" +
    "\035\062\036\067\037\065\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\047\uffc6\052\uffc6\056\uffc6\001\002\000\040\011\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\047\uffc7\052\uffc7" +
    "\056\uffc7\001\002\000\026\004\045\005\042\006\046\007" +
    "\051\010\054\017\044\020\050\026\047\031\043\040\053" +
    "\001\002\000\040\011\uffc3\027\uffc3\030\063\031\060\034" +
    "\uffc3\035\062\036\067\037\065\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\047\uffc3\052\uffc3\056\uffc3\001\002\000\040\011" +
    "\uffc2\027\uffc2\030\063\031\060\034\uffc2\035\062\036\067" +
    "\037\065\040\uffc2\041\uffc2\042\uffc2\043\uffc2\047\uffc2\052" +
    "\uffc2\056\uffc2\001\002\000\040\011\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\034\uffcc\035\062\036\067\037\065\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\047\uffcc\052\uffcc\056\uffcc\001\002" +
    "\000\026\004\045\005\042\006\046\007\051\010\054\017" +
    "\044\020\050\026\047\031\043\040\053\001\002\000\040" +
    "\011\uffca\027\uffca\030\uffca\031\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\065\040\uffca\041\uffca\042\uffca\043\uffca\047\uffca" +
    "\052\uffca\056\uffca\001\002\000\040\011\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\047\uffc8\052\uffc8\056\uffc8\001" +
    "\002\000\026\004\045\005\042\006\046\007\051\010\054" +
    "\017\044\020\050\026\047\031\043\040\053\001\002\000" +
    "\040\011\uffc4\027\uffc4\030\063\031\060\034\uffc4\035\062" +
    "\036\067\037\065\040\uffc4\041\uffc4\042\uffc4\043\uffc4\047" +
    "\uffc4\052\uffc4\056\uffc4\001\002\000\040\011\uffc1\027\uffc1" +
    "\030\063\031\060\034\uffc1\035\062\036\067\037\065\040" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\047\uffc1\052\uffc1\056\uffc1" +
    "\001\002\000\040\011\uffcb\027\uffcb\030\uffcb\031\uffcb\034" +
    "\uffcb\035\062\036\067\037\065\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\047\uffcb\052\uffcb\056\uffcb\001\002\000\040\011" +
    "\uffbe\027\uffbe\030\063\031\060\034\066\035\062\036\067" +
    "\037\065\040\uffbe\041\uffbe\042\uffbe\043\uffbe\047\uffbe\052" +
    "\061\056\064\001\002\000\026\004\045\005\042\006\046" +
    "\007\051\010\054\017\044\020\050\026\047\031\043\040" +
    "\053\001\002\000\040\011\uffc0\027\uffc0\030\063\031\060" +
    "\034\066\035\062\036\067\037\065\040\uffc0\041\uffc0\042" +
    "\uffc0\043\057\047\uffc0\052\061\056\064\001\002\000\030" +
    "\004\045\005\042\006\046\007\051\010\054\017\044\020" +
    "\050\026\047\031\043\040\053\057\123\001\002\000\032" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\017\uffe0\020" +
    "\uffe0\026\uffe0\031\uffe0\040\uffe0\050\uffe0\057\uffe0\001\002" +
    "\000\032\004\045\005\042\006\046\007\051\010\054\017" +
    "\044\020\050\026\047\031\043\040\053\050\142\057\143" +
    "\001\002\000\004\034\133\001\002\000\032\030\063\031" +
    "\060\034\125\035\062\036\067\037\065\040\071\041\070" +
    "\042\056\043\057\052\061\056\064\001\002\000\006\034" +
    "\077\056\126\001\002\000\004\047\127\001\002\000\032" +
    "\003\027\007\020\013\031\021\017\024\037\025\030\051" +
    "\035\053\007\055\036\060\021\061\025\062\005\001\002" +
    "\000\034\003\027\007\020\013\031\021\017\024\037\025" +
    "\030\050\132\051\035\053\007\055\036\060\021\061\025" +
    "\062\005\001\002\000\036\002\uffff\003\uffff\007\uffff\013" +
    "\uffff\021\uffff\024\uffff\025\uffff\050\uffff\051\uffff\053\uffff" +
    "\055\uffff\060\uffff\061\uffff\062\uffff\001\002\000\032\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\017\uffdf\020\uffdf" +
    "\026\uffdf\031\uffdf\040\uffdf\050\uffdf\057\uffdf\001\002\000" +
    "\004\056\134\001\002\000\004\047\135\001\002\000\032" +
    "\003\027\007\020\013\031\021\017\024\037\025\030\051" +
    "\035\053\007\055\036\060\021\061\025\062\005\001\002" +
    "\000\034\003\027\007\020\013\031\021\017\024\037\025" +
    "\030\050\137\051\035\053\007\055\036\060\021\061\025" +
    "\062\005\001\002\000\004\050\140\001\002\000\036\002" +
    "\uffe2\003\uffe2\007\uffe2\013\uffe2\021\uffe2\024\uffe2\025\uffe2" +
    "\050\uffe2\051\uffe2\053\uffe2\055\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\001\002\000\032\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\uffe1\017\uffe1\020\uffe1\026\uffe1\031\uffe1\040\uffe1\050" +
    "\uffe1\057\uffe1\001\002\000\036\002\uffe4\003\uffe4\007\uffe4" +
    "\013\uffe4\021\uffe4\024\uffe4\025\uffe4\050\uffe4\051\uffe4\053" +
    "\uffe4\055\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002\000\004" +
    "\034\144\001\002\000\004\056\145\001\002\000\004\047" +
    "\146\001\002\000\032\003\027\007\020\013\031\021\017" +
    "\024\037\025\030\051\035\053\007\055\036\060\021\061" +
    "\025\062\005\001\002\000\034\003\027\007\020\013\031" +
    "\021\017\024\037\025\030\050\150\051\035\053\007\055" +
    "\036\060\021\061\025\062\005\001\002\000\004\050\151" +
    "\001\002\000\036\002\uffe3\003\uffe3\007\uffe3\013\uffe3\021" +
    "\uffe3\024\uffe3\025\uffe3\050\uffe3\051\uffe3\053\uffe3\055\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\001\002\000\034\027\153\030" +
    "\063\031\060\034\066\035\062\036\067\037\065\040\071" +
    "\041\070\042\056\043\057\052\061\056\064\001\002\000" +
    "\040\011\uffb5\027\uffb5\030\uffb5\031\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\047" +
    "\uffb5\052\uffb5\056\uffb5\001\002\000\040\011\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\047\uffcd\052\uffcd\056\uffcd" +
    "\001\002\000\004\007\156\001\002\000\004\034\176\001" +
    "\002\000\026\004\045\005\042\006\046\007\051\010\054" +
    "\017\044\020\050\026\047\031\043\040\053\001\002\000" +
    "\034\011\161\030\063\031\060\034\066\035\062\036\067" +
    "\037\065\040\071\041\070\042\056\043\057\052\061\056" +
    "\064\001\002\000\004\007\162\001\002\000\010\030\170" +
    "\031\172\034\171\001\002\000\004\027\164\001\002\000" +
    "\004\047\165\001\002\000\032\003\027\007\020\013\031" +
    "\021\017\024\037\025\030\051\035\053\007\055\036\060" +
    "\021\061\025\062\005\001\002\000\034\003\027\007\020" +
    "\013\031\021\017\024\037\025\030\050\167\051\035\053" +
    "\007\055\036\060\021\061\025\062\005\001\002\000\036" +
    "\002\uffdc\003\uffdc\007\uffdc\013\uffdc\021\uffdc\024\uffdc\025" +
    "\uffdc\050\uffdc\051\uffdc\053\uffdc\055\uffdc\060\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\004\030\175\001\002\000\026\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\040\053\001\002\000\004\031\173\001" +
    "\002\000\004\027\uffd9\001\002\000\034\027\uffdb\030\063" +
    "\031\060\034\066\035\062\036\067\037\065\040\071\041" +
    "\070\042\056\043\057\052\061\056\064\001\002\000\004" +
    "\027\uffda\001\002\000\026\004\045\005\042\006\046\007" +
    "\051\010\054\017\044\020\050\026\177\031\043\040\053" +
    "\001\002\000\040\004\045\005\042\006\046\007\051\010" +
    "\054\014\205\015\203\016\202\017\044\020\050\022\204" +
    "\023\206\026\047\031\043\040\053\001\002\000\034\011" +
    "\201\030\063\031\060\034\066\035\062\036\067\037\065" +
    "\040\071\041\070\042\056\043\057\052\061\056\064\001" +
    "\002\000\060\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\013\uffea\017\uffea\020\uffea\021\uffea\024" +
    "\uffea\025\uffea\026\uffea\031\uffea\040\uffea\050\uffea\051\uffea" +
    "\053\uffea\055\uffea\060\uffea\061\uffea\062\uffea\001\002\000" +
    "\010\011\uffd2\027\uffd2\034\uffd2\001\002\000\010\011\uffd3" +
    "\027\uffd3\034\uffd3\001\002\000\010\011\uffd1\027\uffd1\034" +
    "\uffd1\001\002\000\010\011\uffd4\027\uffd4\034\uffd4\001\002" +
    "\000\010\011\uffd0\027\uffd0\034\uffd0\001\002\000\004\027" +
    "\210\001\002\000\026\004\045\005\042\006\046\007\051" +
    "\010\054\017\044\020\050\026\047\031\043\040\053\001" +
    "\002\000\034\011\212\030\063\031\060\034\066\035\062" +
    "\036\067\037\065\040\071\041\070\042\056\043\057\052" +
    "\061\056\064\001\002\000\060\002\uffe9\003\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\024\uffe9\025\uffe9\026\uffe9\031\uffe9\040\uffe9" +
    "\050\uffe9\051\uffe9\053\uffe9\055\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\001\002\000\026\004\045\005\042\006\046\007\051" +
    "\010\054\017\044\020\050\026\047\031\043\040\053\001" +
    "\002\000\034\027\216\030\215\031\060\034\066\035\062" +
    "\036\067\037\065\040\071\041\070\042\056\043\057\052" +
    "\061\056\064\001\002\000\026\004\045\005\042\006\046" +
    "\007\051\010\054\017\044\020\050\026\220\031\043\040" +
    "\053\001\002\000\004\011\217\001\002\000\036\002\uffee" +
    "\003\uffee\007\uffee\013\uffee\021\uffee\024\uffee\025\uffee\050" +
    "\uffee\051\uffee\053\uffee\055\uffee\060\uffee\061\uffee\062\uffee" +
    "\001\002\000\026\004\045\005\042\006\046\007\051\010" +
    "\054\017\044\020\050\026\221\031\043\040\053\001\002" +
    "\000\040\004\045\005\042\006\046\007\051\010\054\014" +
    "\205\015\203\016\202\017\044\020\050\022\204\023\206" +
    "\026\047\031\043\040\053\001\002\000\004\027\223\001" +
    "\002\000\026\004\045\005\042\006\046\007\051\010\054" +
    "\017\044\020\050\026\047\031\043\040\053\001\002\000" +
    "\034\027\225\030\063\031\060\034\066\035\062\036\067" +
    "\037\065\040\071\041\070\042\056\043\057\052\061\056" +
    "\064\001\002\000\004\027\226\001\002\000\004\011\227" +
    "\001\002\000\036\002\uffed\003\uffed\007\uffed\013\uffed\021" +
    "\uffed\024\uffed\025\uffed\050\uffed\051\uffed\053\uffed\055\uffed" +
    "\060\uffed\061\uffed\062\uffed\001\002\000\036\002\ufff0\003" +
    "\ufff0\007\ufff0\013\ufff0\021\ufff0\024\ufff0\025\ufff0\050\ufff0" +
    "\051\ufff0\053\ufff0\055\ufff0\060\ufff0\061\ufff0\062\ufff0\001" +
    "\002\000\036\002\uffd6\003\uffd6\007\uffd6\013\uffd6\021\uffd6" +
    "\024\uffd6\025\uffd6\050\uffd6\051\uffd6\053\uffd6\055\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\001\002\000\032\003\027\007\020" +
    "\013\031\021\017\024\037\025\030\051\035\053\007\055" +
    "\036\060\021\061\025\062\005\001\002\000\034\003\027" +
    "\007\020\013\031\021\017\024\037\025\030\050\234\051" +
    "\035\053\007\055\036\060\021\061\025\062\005\001\002" +
    "\000\004\053\235\001\002\000\004\026\236\001\002\000" +
    "\026\004\045\005\042\006\046\007\051\010\054\017\044" +
    "\020\050\026\047\031\043\040\053\001\002\000\034\027" +
    "\240\030\063\031\060\034\066\035\062\036\067\037\065" +
    "\040\071\041\070\042\056\043\057\052\061\056\064\001" +
    "\002\000\004\011\241\001\002\000\036\002\uffdd\003\uffdd" +
    "\007\uffdd\013\uffdd\021\uffdd\024\uffdd\025\uffdd\050\uffdd\051" +
    "\uffdd\053\uffdd\055\uffdd\060\uffdd\061\uffdd\062\uffdd\001\002" +
    "\000\004\030\246\001\002\000\004\031\244\001\002\000" +
    "\004\011\245\001\002\000\036\002\uffd7\003\uffd7\007\uffd7" +
    "\013\uffd7\021\uffd7\024\uffd7\025\uffd7\050\uffd7\051\uffd7\053" +
    "\uffd7\055\uffd7\060\uffd7\061\uffd7\062\uffd7\001\002\000\004" +
    "\011\247\001\002\000\036\002\uffd8\003\uffd8\007\uffd8\013" +
    "\uffd8\021\uffd8\024\uffd8\025\uffd8\050\uffd8\051\uffd8\053\uffd8" +
    "\055\uffd8\060\uffd8\061\uffd8\062\uffd8\001\002\000\026\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\040\053\001\002\000\034\027\252\030" +
    "\063\031\060\034\066\035\062\036\067\037\065\040\071" +
    "\041\070\042\056\043\057\052\061\056\064\001\002\000" +
    "\004\047\253\001\002\000\032\003\027\007\020\013\031" +
    "\021\017\024\037\025\030\051\035\053\007\055\036\060" +
    "\021\061\025\062\005\001\002\000\034\003\027\007\020" +
    "\013\031\021\017\024\037\025\030\050\255\051\035\053" +
    "\007\055\036\060\021\061\025\062\005\001\002\000\040" +
    "\002\uffe7\003\uffe7\007\uffe7\013\uffe7\021\uffe7\024\uffe7\025" +
    "\uffe7\050\uffe7\051\uffe7\053\uffe7\054\256\055\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\001\002\000\006\021\017\047\257\001" +
    "\002\000\032\003\027\007\020\013\031\021\017\024\037" +
    "\025\030\051\035\053\007\055\036\060\021\061\025\062" +
    "\005\001\002\000\036\002\uffe5\003\uffe5\007\uffe5\013\uffe5" +
    "\021\uffe5\024\uffe5\025\uffe5\050\uffe5\051\uffe5\053\uffe5\055" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\001\002\000\034\003\027" +
    "\007\020\013\031\021\017\024\037\025\030\050\262\051" +
    "\035\053\007\055\036\060\021\061\025\062\005\001\002" +
    "\000\036\002\uffe6\003\uffe6\007\uffe6\013\uffe6\021\uffe6\024" +
    "\uffe6\025\uffe6\050\uffe6\051\uffe6\053\uffe6\055\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\001\002\000\004\012\264\001\002\000" +
    "\014\014\205\015\203\016\202\022\204\023\206\001\002" +
    "\000\006\011\267\034\266\001\002\000\026\004\045\005" +
    "\042\006\046\007\051\010\054\017\044\020\050\026\270" +
    "\031\043\040\053\001\002\000\036\002\uffeb\003\uffeb\007" +
    "\uffeb\013\uffeb\021\uffeb\024\uffeb\025\uffeb\050\uffeb\051\uffeb" +
    "\053\uffeb\055\uffeb\060\uffeb\061\uffeb\062\uffeb\001\002\000" +
    "\040\004\045\005\042\006\046\007\051\010\054\014\205" +
    "\015\203\016\202\017\044\020\050\022\204\023\206\026" +
    "\047\031\043\040\053\001\002\000\034\011\272\030\063" +
    "\031\060\034\066\035\062\036\067\037\065\040\071\041" +
    "\070\042\056\043\057\052\061\056\064\001\002\000\036" +
    "\002\uffec\003\uffec\007\uffec\013\uffec\021\uffec\024\uffec\025" +
    "\uffec\050\uffec\051\uffec\053\uffec\055\uffec\060\uffec\061\uffec" +
    "\062\uffec\001\002\000\004\027\274\001\002\000\026\004" +
    "\045\005\042\006\046\007\051\010\054\017\044\020\050" +
    "\026\047\031\043\040\053\001\002\000\034\011\276\030" +
    "\063\031\060\034\066\035\062\036\067\037\065\040\071" +
    "\041\070\042\056\043\057\052\061\056\064\001\002\000" +
    "\036\002\uffe8\003\uffe8\007\uffe8\013\uffe8\021\uffe8\024\uffe8" +
    "\025\uffe8\050\uffe8\051\uffe8\053\uffe8\055\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\001\002\000\026\004\045\005\042\006\046" +
    "\007\051\010\054\017\044\020\050\026\047\031\043\040" +
    "\053\001\002\000\034\027\301\030\063\031\060\034\066" +
    "\035\062\036\067\037\065\040\071\041\070\042\056\043" +
    "\057\052\061\056\064\001\002\000\004\047\302\001\002" +
    "\000\032\003\027\007\020\013\031\021\017\024\037\025" +
    "\030\051\035\053\007\055\036\060\021\061\025\062\005" +
    "\001\002\000\034\003\027\007\020\013\031\021\017\024" +
    "\037\025\030\050\304\051\035\053\007\055\036\060\021" +
    "\061\025\062\005\001\002\000\036\002\uffde\003\uffde\007" +
    "\uffde\013\uffde\021\uffde\024\uffde\025\uffde\050\uffde\051\uffde" +
    "\053\uffde\055\uffde\060\uffde\061\uffde\062\uffde\001\002\000" +
    "\036\002\uffd5\003\uffd5\007\uffd5\013\uffd5\021\uffd5\024\uffd5" +
    "\025\uffd5\050\uffd5\051\uffd5\053\uffd5\055\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\044\002\037\003\012\004\003\005\023\006" +
    "\007\007\022\010\032\011\025\013\011\014\033\016\005" +
    "\017\015\020\031\021\021\022\014\023\013\027\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\130\005\023\006\007\007\022" +
    "\010\032\011\025\013\011\014\033\016\005\017\015\020" +
    "\031\021\021\022\014\023\013\027\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\114\001\001\000\004\012\113" +
    "\001\001\000\004\012\111\001\001\000\004\012\106\001" +
    "\001\000\004\012\104\001\001\000\004\012\102\001\001" +
    "\000\004\012\100\001\001\000\002\001\001\000\004\012" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\072\001\001\000\002\001\001\000\004\012\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\116\001\001\000\002\001\001\000\010\012\123" +
    "\024\121\025\120\001\001\000\002\001\001\000\006\012" +
    "\123\025\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\127\004" +
    "\003\005\023\006\007\007\022\010\032\011\025\013\011" +
    "\014\033\016\005\017\015\020\031\021\021\022\014\023" +
    "\013\027\010\001\001\000\040\004\130\005\023\006\007" +
    "\007\022\010\032\011\025\013\011\014\033\016\005\017" +
    "\015\020\031\021\021\022\014\023\013\027\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\135\004\003\005\023\006\007" +
    "\007\022\010\032\011\025\013\011\014\033\016\005\017" +
    "\015\020\031\021\021\022\014\023\013\027\010\001\001" +
    "\000\040\004\130\005\023\006\007\007\022\010\032\011" +
    "\025\013\011\014\033\016\005\017\015\020\031\021\021" +
    "\022\014\023\013\027\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\146\004\003\005\023\006\007\007\022\010\032\011\025" +
    "\013\011\014\033\016\005\017\015\020\031\021\021\022" +
    "\014\023\013\027\010\001\001\000\040\004\130\005\023" +
    "\006\007\007\022\010\032\011\025\013\011\014\033\016" +
    "\005\017\015\020\031\021\021\022\014\023\013\027\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\156" +
    "\001\001\000\002\001\001\000\004\012\157\001\001\000" +
    "\002\001\001\000\004\015\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\165\004" +
    "\003\005\023\006\007\007\022\010\032\011\025\013\011" +
    "\014\033\016\005\017\015\020\031\021\021\022\014\023" +
    "\013\027\010\001\001\000\040\004\130\005\023\006\007" +
    "\007\022\010\032\011\025\013\011\014\033\016\005\017" +
    "\015\020\031\021\021\022\014\023\013\027\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\177\001\001\000\006\012" +
    "\151\026\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\213\001\001\000\002\001\001\000\004\012\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\151\001\001\000\006\012\151\026\221\001\001\000\002" +
    "\001\001\000\004\012\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\232\004\003\005" +
    "\023\006\007\007\022\010\032\011\025\013\011\014\033" +
    "\016\005\017\015\020\031\021\021\022\014\023\013\027" +
    "\010\001\001\000\040\004\130\005\023\006\007\007\022" +
    "\010\032\011\025\013\011\014\033\016\005\017\015\020" +
    "\031\021\021\022\014\023\013\027\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\253\004\003\005\023\006\007\007\022\010\032\011\025" +
    "\013\011\014\033\016\005\017\015\020\031\021\021\022" +
    "\014\023\013\027\010\001\001\000\040\004\130\005\023" +
    "\006\007\007\022\010\032\011\025\013\011\014\033\016" +
    "\005\017\015\020\031\021\021\022\014\023\013\027\010" +
    "\001\001\000\002\001\001\000\004\013\257\001\001\000" +
    "\042\003\260\004\003\005\023\006\007\007\022\010\032" +
    "\011\025\013\011\014\033\016\005\017\015\020\031\021" +
    "\021\022\014\023\013\027\010\001\001\000\002\001\001" +
    "\000\040\004\130\005\023\006\007\007\022\010\032\011" +
    "\025\013\011\014\033\016\005\017\015\020\031\021\021" +
    "\022\014\023\013\027\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\264\001\001\000\002\001\001" +
    "\000\004\012\270\001\001\000\002\001\001\000\006\012" +
    "\151\026\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\302\004\003\005" +
    "\023\006\007\007\022\010\032\011\025\013\011\014\033" +
    "\016\005\017\015\020\031\021\021\022\014\023\013\027" +
    "\010\001\001\000\040\004\130\005\023\006\007\007\022" +
    "\010\032\011\025\013\011\014\033\016\005\017\015\020" +
    "\031\021\021\022\014\023\013\027\010\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CCONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PRINTLN ::= PRINT PARIZQ EXPRESION PARDER PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prinln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRINTLN ::= PRINT PARIZQ EXPRESION MAS PARIZQ PARIZQ TIPOSVALORES PARDER EXPRESION PARDER PARDER PYC 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new Prinln(new OperacionesAritmeticas(c, new CasteoPrint(a,b,aleft, aright), SimbolosAritmeticos.SUMA, aleft, aright), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(b, c, a, d,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES PYC 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionPorDefecto(b,a,c,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= ID IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= ID IGUAL PARIZQ TIPOSVALORES PARDER EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CasteoAsignacion(a, c, b,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASTEO ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES IGUAL PARIZQ TIPOSVALORES PARDER EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteo(b, c, d, a, e,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new IfElse(a,b,c,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Elif(a,b,c,aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CMATCH ::= MATCH EXPRESION LLAVEIZQ INSTRUCCIONESMATCH LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> b = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Match(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CMATCH ::= MATCH EXPRESION LLAVEIZQ INSTRUCCIONESMATCH BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<ObjetoMatch> b = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new MatchDefault(a,b,c,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CMATCH ::= MATCH EXPRESION LLAVEIZQ BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new Default(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCIONESMATCH ::= INSTRUCCIONESMATCH SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> a = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch b = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCIONESMATCH ::= SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch a = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIASMATCH ::= EXPRESION IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              ObjetoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ObjetoMatch(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIASMATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CDOWHILE ::= DO LLAVEIZQ INSTRUCCIONES LLAVEDER WHILE PARIZQ EXPRESION PARDER PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PYC ACTUALIZAR_FOR PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ACTUALIZAR_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ACTUALIZAR_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Incremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ACTUALIZAR_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Decremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INCREMENTO ::= ID MAS MAS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new Incremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECREMENTO ::= ID MENOS MENOS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT=new Decremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CBREAK ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBREAK",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CCONTINUE ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CCONTINUE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOSVALORES ::= ENTERO 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.INT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOSVALORES ::= DECIMAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.DOUBLE);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOSVALORES ::= CADENA 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.STRING);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOSVALORES ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.BOOLEAN);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPOSVALORES ::= CARACTERES 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.CHAR);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPOMUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOMUTABILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOMUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOMUTABILIDAD",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, SimbolosAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION MULTIPLICACION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.IGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION NEGACION IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.NOIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYORIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENORIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= EXPRESION AND AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.AND,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION OR OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.OR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.XOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= NEGACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,SimbolosRelacionales.NOT,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= INT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= DOUBLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(new Double(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= STRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(true, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(false, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
