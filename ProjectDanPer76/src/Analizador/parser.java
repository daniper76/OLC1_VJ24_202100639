
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import IntruccionAbstracta.Instruccion;
import Simbolo.Tipo;
import Simbolo.TipoDeDato;
import Errores.Errores;
import Instrucciones.Prinln;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVariable;
import Instrucciones.If;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.While;
import Instrucciones.IfElse;
import Instrucciones.Elif;
import Instrucciones.Match;
import Instrucciones.ObjetoMatch;
import Instrucciones.MatchDefault;
import Instrucciones.Default;
import Instrucciones.DoWhile;
import Instrucciones.Decremento;
import Instrucciones.Incremento;
import Instrucciones.Casteo;
import Instrucciones.CasteoAsignacion;
import Instrucciones.DeclaracionPorDefecto;
import Expresiones.DatoNativo;
import Expresiones.OperacionesAritmeticas;
import Expresiones.SimbolosAritmeticos;
import Expresiones.SimbolosRelacionales;
import Expresiones.OperacionesRelacionales;
import Expresiones.AccesoVariable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\007" +
    "\000\002\006\011\000\002\006\007\000\002\007\006\000" +
    "\002\007\011\000\002\022\014\000\002\013\011\000\002" +
    "\013\015\000\002\013\013\000\002\020\007\000\002\020" +
    "\015\000\002\020\014\000\002\023\004\000\002\023\003" +
    "\000\002\024\010\000\002\017\011\000\002\021\013\000" +
    "\002\014\014\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\011\005\000\002\010\005\000\002\016" +
    "\004\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\012\004\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\006\000\002\012\005\000\002\012\006\000\002\012\006" +
    "\000\002\012\005\000\002\012\005\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\005\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\030\003\027\007\016\013\025\021\015\024" +
    "\035\025\026\055\033\057\006\061\034\064\017\065\023" +
    "\001\002\000\034\002\ufffe\003\ufffe\007\ufffe\013\ufffe\021" +
    "\ufffe\024\ufffe\025\ufffe\054\ufffe\055\ufffe\057\ufffe\061\ufffe" +
    "\064\ufffe\065\ufffe\001\002\000\034\002\ufff8\003\ufff8\007" +
    "\ufff8\013\ufff8\021\ufff8\024\ufff8\025\ufff8\054\ufff8\055\ufff8" +
    "\057\ufff8\061\ufff8\064\ufff8\065\ufff8\001\002\000\004\026" +
    "\262\001\002\000\034\002\ufffc\003\ufffc\007\ufffc\013\ufffc" +
    "\021\ufffc\024\ufffc\025\ufffc\054\ufffc\055\ufffc\057\ufffc\061" +
    "\ufffc\064\ufffc\065\ufffc\001\002\000\004\007\246\001\002" +
    "\000\032\002\000\003\027\007\016\013\025\021\015\024" +
    "\035\025\026\055\033\057\006\061\034\064\017\065\023" +
    "\001\002\000\034\002\ufffa\003\ufffa\007\ufffa\013\ufffa\021" +
    "\ufffa\024\ufffa\025\ufffa\054\ufffa\055\ufffa\057\ufffa\061\ufffa" +
    "\064\ufffa\065\ufffa\001\002\000\034\002\ufff2\003\ufff2\007" +
    "\ufff2\013\ufff2\021\ufff2\024\ufff2\025\ufff2\054\ufff2\055\ufff2" +
    "\057\ufff2\061\ufff2\064\ufff2\065\ufff2\001\002\000\034\002" +
    "\ufff5\003\ufff5\007\ufff5\013\ufff5\021\ufff5\024\ufff5\025\ufff5" +
    "\054\ufff5\055\ufff5\057\ufff5\061\ufff5\064\ufff5\065\ufff5\001" +
    "\002\000\004\026\233\001\002\000\010\030\227\031\230" +
    "\036\174\001\002\000\004\053\217\001\002\000\034\002" +
    "\ufff6\003\ufff6\007\ufff6\013\ufff6\021\ufff6\024\ufff6\025\ufff6" +
    "\054\ufff6\055\ufff6\057\ufff6\061\ufff6\064\ufff6\065\ufff6\001" +
    "\002\000\034\002\ufffb\003\ufffb\007\ufffb\013\ufffb\021\ufffb" +
    "\024\ufffb\025\ufffb\054\ufffb\055\ufffb\057\ufffb\061\ufffb\064" +
    "\ufffb\065\ufffb\001\002\000\034\002\ufffd\003\ufffd\007\ufffd" +
    "\013\ufffd\021\ufffd\024\ufffd\025\ufffd\054\ufffd\055\ufffd\057" +
    "\ufffd\061\ufffd\064\ufffd\065\ufffd\001\002\000\004\011\216" +
    "\001\002\000\034\002\ufff4\003\ufff4\007\ufff4\013\ufff4\021" +
    "\ufff4\024\ufff4\025\ufff4\054\ufff4\055\ufff4\057\ufff4\061\ufff4" +
    "\064\ufff4\065\ufff4\001\002\000\004\026\212\001\002\000" +
    "\004\007\uffd1\001\002\000\036\002\ufff0\003\ufff0\007\ufff0" +
    "\011\211\013\ufff0\021\ufff0\024\ufff0\025\ufff0\054\ufff0\055" +
    "\ufff0\057\ufff0\061\ufff0\064\ufff0\065\ufff0\001\002\000\034" +
    "\002\ufff7\003\ufff7\007\ufff7\013\ufff7\021\ufff7\024\ufff7\025" +
    "\ufff7\054\ufff7\055\ufff7\057\ufff7\061\ufff7\064\ufff7\065\ufff7" +
    "\001\002\000\034\002\ufff3\003\ufff3\007\ufff3\013\ufff3\021" +
    "\ufff3\024\ufff3\025\ufff3\054\ufff3\055\ufff3\057\ufff3\061\ufff3" +
    "\064\ufff3\065\ufff3\001\002\000\034\002\ufff9\003\ufff9\007" +
    "\ufff9\013\ufff9\021\ufff9\024\ufff9\025\ufff9\054\ufff9\055\ufff9" +
    "\057\ufff9\061\ufff9\064\ufff9\065\ufff9\001\002\000\004\026" +
    "\153\001\002\000\026\004\043\005\040\006\044\007\047" +
    "\010\052\017\042\020\045\026\046\031\041\043\051\001" +
    "\002\000\004\007\uffd2\001\002\000\004\002\037\001\002" +
    "\000\004\002\001\001\002\000\040\011\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\053\uffbf\056\uffbf\062\uffbf\001" +
    "\002\000\026\004\043\005\040\006\044\007\047\010\052" +
    "\017\042\020\045\026\046\031\041\043\051\001\002\000" +
    "\040\011\uffbc\027\uffbc\030\uffbc\031\uffbc\036\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc\053" +
    "\uffbc\056\uffbc\062\uffbc\001\002\000\040\011\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\036\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\053\uffbd\056\uffbd\062\uffbd" +
    "\001\002\000\040\011\uffbe\027\uffbe\030\uffbe\031\uffbe\036" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\053\uffbe\056\uffbe\062\uffbe\001\002\000\040\011" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\036\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\053\uffbb\056" +
    "\uffbb\062\uffbb\001\002\000\026\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\046\031\041\043" +
    "\051\001\002\000\040\011\uffba\027\uffba\030\uffba\031\uffba" +
    "\036\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba\046" +
    "\uffba\047\uffba\053\uffba\056\uffba\062\uffba\001\002\000\034" +
    "\030\061\031\056\036\064\040\060\041\065\042\063\043" +
    "\067\045\066\046\054\047\055\053\116\056\057\062\062" +
    "\001\002\000\026\004\043\005\040\006\044\007\047\010" +
    "\052\017\042\020\045\026\046\031\041\043\051\001\002" +
    "\000\040\011\uffb9\027\uffb9\030\uffb9\031\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\053\uffb9\056\uffb9\062\uffb9\001\002\000\040\011\uffc0\027" +
    "\uffc0\030\061\031\056\036\uffc0\040\060\041\065\042\063" +
    "\043\uffc0\045\uffc0\046\uffc0\047\uffc0\053\uffc0\056\057\062" +
    "\062\001\002\000\004\046\114\001\002\000\026\004\043" +
    "\005\040\006\044\007\047\010\052\017\042\020\045\026" +
    "\046\031\041\043\051\001\002\000\026\004\043\005\040" +
    "\006\044\007\047\010\052\017\042\020\045\026\046\031" +
    "\041\043\051\001\002\000\030\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\046\031\041\036" +
    "\107\043\051\001\002\000\030\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\046\031\041\040" +
    "\104\043\051\001\002\000\026\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\046\031\041\043" +
    "\051\001\002\000\030\004\043\005\040\006\044\007\047" +
    "\010\052\017\042\020\045\026\046\031\041\036\100\043" +
    "\051\001\002\000\026\004\043\005\040\006\044\007\047" +
    "\010\052\017\042\020\045\026\046\031\041\043\051\001" +
    "\002\000\004\036\075\001\002\000\026\004\043\005\040" +
    "\006\044\007\047\010\052\017\042\020\045\026\046\031" +
    "\041\043\051\001\002\000\004\045\072\001\002\000\004" +
    "\036\070\001\002\000\026\004\043\005\040\006\044\007" +
    "\047\010\052\017\042\020\045\026\046\031\041\043\051" +
    "\001\002\000\040\011\uffc8\027\uffc8\030\061\031\056\036" +
    "\uffc8\040\060\041\065\042\063\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\053\uffc8\056\uffc8\062\uffc8\001\002\000\026\004" +
    "\043\005\040\006\044\007\047\010\052\017\042\020\045" +
    "\026\046\031\041\043\051\001\002\000\040\011\uffc2\027" +
    "\uffc2\030\061\031\056\036\uffc2\040\060\041\065\042\063" +
    "\043\uffc2\045\uffc2\046\uffc2\047\055\053\uffc2\056\057\062" +
    "\062\001\002\000\040\011\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\036\uffcc\040\uffcc\041\uffcc\042\063\043\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\053\uffcc\056\uffcc\062\uffcc\001\002\000\026" +
    "\004\043\005\040\006\044\007\047\010\052\017\042\020" +
    "\045\026\046\031\041\043\051\001\002\000\040\011\uffc9" +
    "\027\uffc9\030\061\031\056\036\uffc9\040\060\041\065\042" +
    "\063\043\uffc9\045\uffc9\046\uffc9\047\uffc9\053\uffc9\056\uffc9" +
    "\062\uffc9\001\002\000\040\011\uffca\027\uffca\030\uffca\031" +
    "\uffca\036\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca" +
    "\046\uffca\047\uffca\053\uffca\056\uffca\062\uffca\001\002\000" +
    "\026\004\043\005\040\006\044\007\047\010\052\017\042" +
    "\020\045\026\046\031\041\043\051\001\002\000\040\011" +
    "\uffc6\027\uffc6\030\061\031\056\036\uffc6\040\060\041\065" +
    "\042\063\043\uffc6\045\uffc6\046\uffc6\047\uffc6\053\uffc6\056" +
    "\uffc6\062\uffc6\001\002\000\040\011\uffc5\027\uffc5\030\061" +
    "\031\056\036\uffc5\040\060\041\065\042\063\043\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\053\uffc5\056\uffc5\062\uffc5\001\002" +
    "\000\040\011\uffcf\027\uffcf\030\uffcf\031\uffcf\036\uffcf\040" +
    "\060\041\065\042\063\043\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\053\uffcf\056\uffcf\062\uffcf\001\002\000\026\004\043\005" +
    "\040\006\044\007\047\010\052\017\042\020\045\026\046" +
    "\031\041\043\051\001\002\000\040\011\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\036\uffcd\040\uffcd\041\uffcd\042\063\043\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\053\uffcd\056\uffcd\062\uffcd\001" +
    "\002\000\040\011\uffcb\027\uffcb\030\uffcb\031\uffcb\036\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\053\uffcb\056\uffcb\062\uffcb\001\002\000\026\004\043" +
    "\005\040\006\044\007\047\010\052\017\042\020\045\026" +
    "\046\031\041\043\051\001\002\000\040\011\uffc7\027\uffc7" +
    "\030\061\031\056\036\uffc7\040\060\041\065\042\063\043" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\053\uffc7\056\uffc7\062\uffc7" +
    "\001\002\000\040\011\uffc4\027\uffc4\030\061\031\056\036" +
    "\uffc4\040\060\041\065\042\063\043\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\053\uffc4\056\uffc4\062\uffc4\001\002\000\040\011" +
    "\uffce\027\uffce\030\uffce\031\uffce\036\uffce\040\060\041\065" +
    "\042\063\043\uffce\045\uffce\046\uffce\047\uffce\053\uffce\056" +
    "\uffce\062\uffce\001\002\000\040\011\uffc1\027\uffc1\030\061" +
    "\031\056\036\uffc1\040\060\041\065\042\063\043\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\053\uffc1\056\057\062\062\001\002" +
    "\000\026\004\043\005\040\006\044\007\047\010\052\017" +
    "\042\020\045\026\046\031\041\043\051\001\002\000\040" +
    "\011\uffc3\027\uffc3\030\061\031\056\036\uffc3\040\060\041" +
    "\065\042\063\043\uffc3\045\uffc3\046\uffc3\047\055\053\uffc3" +
    "\056\057\062\062\001\002\000\030\004\043\005\040\006" +
    "\044\007\047\010\052\017\042\020\045\026\046\031\041" +
    "\043\051\063\121\001\002\000\032\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\017\uffe2\020\uffe2\026\uffe2\031\uffe2" +
    "\043\uffe2\054\uffe2\063\uffe2\001\002\000\032\004\043\005" +
    "\040\006\044\007\047\010\052\017\042\020\045\026\046" +
    "\031\041\043\051\054\140\063\141\001\002\000\004\036" +
    "\131\001\002\000\032\030\061\031\056\036\123\040\060" +
    "\041\065\042\063\043\067\045\066\046\054\047\055\056" +
    "\057\062\062\001\002\000\006\036\075\062\124\001\002" +
    "\000\004\053\125\001\002\000\030\003\027\007\016\013" +
    "\025\021\015\024\035\025\026\055\033\057\006\061\034" +
    "\064\017\065\023\001\002\000\032\003\027\007\016\013" +
    "\025\021\015\024\035\025\026\054\130\055\033\057\006" +
    "\061\034\064\017\065\023\001\002\000\034\002\uffff\003" +
    "\uffff\007\uffff\013\uffff\021\uffff\024\uffff\025\uffff\054\uffff" +
    "\055\uffff\057\uffff\061\uffff\064\uffff\065\uffff\001\002\000" +
    "\032\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\017\uffe1" +
    "\020\uffe1\026\uffe1\031\uffe1\043\uffe1\054\uffe1\063\uffe1\001" +
    "\002\000\004\062\132\001\002\000\004\053\133\001\002" +
    "\000\030\003\027\007\016\013\025\021\015\024\035\025" +
    "\026\055\033\057\006\061\034\064\017\065\023\001\002" +
    "\000\032\003\027\007\016\013\025\021\015\024\035\025" +
    "\026\054\135\055\033\057\006\061\034\064\017\065\023" +
    "\001\002\000\004\054\136\001\002\000\034\002\uffe4\003" +
    "\uffe4\007\uffe4\013\uffe4\021\uffe4\024\uffe4\025\uffe4\054\uffe4" +
    "\055\uffe4\057\uffe4\061\uffe4\064\uffe4\065\uffe4\001\002\000" +
    "\032\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\017\uffe3" +
    "\020\uffe3\026\uffe3\031\uffe3\043\uffe3\054\uffe3\063\uffe3\001" +
    "\002\000\034\002\uffe6\003\uffe6\007\uffe6\013\uffe6\021\uffe6" +
    "\024\uffe6\025\uffe6\054\uffe6\055\uffe6\057\uffe6\061\uffe6\064" +
    "\uffe6\065\uffe6\001\002\000\004\036\142\001\002\000\004" +
    "\062\143\001\002\000\004\053\144\001\002\000\030\003" +
    "\027\007\016\013\025\021\015\024\035\025\026\055\033" +
    "\057\006\061\034\064\017\065\023\001\002\000\032\003" +
    "\027\007\016\013\025\021\015\024\035\025\026\054\146" +
    "\055\033\057\006\061\034\064\017\065\023\001\002\000" +
    "\004\054\147\001\002\000\034\002\uffe5\003\uffe5\007\uffe5" +
    "\013\uffe5\021\uffe5\024\uffe5\025\uffe5\054\uffe5\055\uffe5\057" +
    "\uffe5\061\uffe5\064\uffe5\065\uffe5\001\002\000\034\027\151" +
    "\030\061\031\056\036\064\040\060\041\065\042\063\043" +
    "\067\045\066\046\054\047\055\056\057\062\062\001\002" +
    "\000\040\011\uffb8\027\uffb8\030\uffb8\031\uffb8\036\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\053\uffb8\056\uffb8\062\uffb8\001\002\000\040\011\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\045\uffd0\046\uffd0\047\uffd0\053\uffd0\056\uffd0\062" +
    "\uffd0\001\002\000\004\007\154\001\002\000\004\036\174" +
    "\001\002\000\026\004\043\005\040\006\044\007\047\010" +
    "\052\017\042\020\045\026\046\031\041\043\051\001\002" +
    "\000\034\011\157\030\061\031\056\036\064\040\060\041" +
    "\065\042\063\043\067\045\066\046\054\047\055\056\057" +
    "\062\062\001\002\000\004\007\160\001\002\000\010\030" +
    "\166\031\170\036\167\001\002\000\004\027\162\001\002" +
    "\000\004\053\163\001\002\000\030\003\027\007\016\013" +
    "\025\021\015\024\035\025\026\055\033\057\006\061\034" +
    "\064\017\065\023\001\002\000\032\003\027\007\016\013" +
    "\025\021\015\024\035\025\026\054\165\055\033\057\006" +
    "\061\034\064\017\065\023\001\002\000\034\002\uffde\003" +
    "\uffde\007\uffde\013\uffde\021\uffde\024\uffde\025\uffde\054\uffde" +
    "\055\uffde\057\uffde\061\uffde\064\uffde\065\uffde\001\002\000" +
    "\004\030\173\001\002\000\026\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\046\031\041\043" +
    "\051\001\002\000\004\031\171\001\002\000\004\027\uffdb" +
    "\001\002\000\034\027\uffdd\030\061\031\056\036\064\040" +
    "\060\041\065\042\063\043\067\045\066\046\054\047\055" +
    "\056\057\062\062\001\002\000\004\027\uffdc\001\002\000" +
    "\026\004\043\005\040\006\044\007\047\010\052\017\042" +
    "\020\045\026\175\031\041\043\051\001\002\000\040\004" +
    "\043\005\040\006\044\007\047\010\052\014\203\015\201" +
    "\016\200\017\042\020\045\022\202\023\204\026\046\031" +
    "\041\043\051\001\002\000\034\011\177\030\061\031\056" +
    "\036\064\040\060\041\065\042\063\043\067\045\066\046" +
    "\054\047\055\056\057\062\062\001\002\000\056\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\013" +
    "\uffec\017\uffec\020\uffec\021\uffec\024\uffec\025\uffec\026\uffec" +
    "\031\uffec\043\uffec\054\uffec\055\uffec\057\uffec\061\uffec\064" +
    "\uffec\065\uffec\001\002\000\010\011\uffd5\027\uffd5\036\uffd5" +
    "\001\002\000\010\011\uffd6\027\uffd6\036\uffd6\001\002\000" +
    "\010\011\uffd4\027\uffd4\036\uffd4\001\002\000\010\011\uffd7" +
    "\027\uffd7\036\uffd7\001\002\000\010\011\uffd3\027\uffd3\036" +
    "\uffd3\001\002\000\004\027\206\001\002\000\026\004\043" +
    "\005\040\006\044\007\047\010\052\017\042\020\045\026" +
    "\046\031\041\043\051\001\002\000\034\011\210\030\061" +
    "\031\056\036\064\040\060\041\065\042\063\043\067\045" +
    "\066\046\054\047\055\056\057\062\062\001\002\000\056" +
    "\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\013\uffeb\017\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\031\uffeb\043\uffeb\054\uffeb\055\uffeb\057\uffeb\061" +
    "\uffeb\064\uffeb\065\uffeb\001\002\000\034\002\ufff1\003\ufff1" +
    "\007\ufff1\013\ufff1\021\ufff1\024\ufff1\025\ufff1\054\ufff1\055" +
    "\ufff1\057\ufff1\061\ufff1\064\ufff1\065\ufff1\001\002\000\026" +
    "\004\043\005\040\006\044\007\047\010\052\017\042\020" +
    "\045\026\046\031\041\043\051\001\002\000\034\027\214" +
    "\030\061\031\056\036\064\040\060\041\065\042\063\043" +
    "\067\045\066\046\054\047\055\056\057\062\062\001\002" +
    "\000\004\011\215\001\002\000\034\002\uffef\003\uffef\007" +
    "\uffef\013\uffef\021\uffef\024\uffef\025\uffef\054\uffef\055\uffef" +
    "\057\uffef\061\uffef\064\uffef\065\uffef\001\002\000\034\002" +
    "\uffd8\003\uffd8\007\uffd8\013\uffd8\021\uffd8\024\uffd8\025\uffd8" +
    "\054\uffd8\055\uffd8\057\uffd8\061\uffd8\064\uffd8\065\uffd8\001" +
    "\002\000\030\003\027\007\016\013\025\021\015\024\035" +
    "\025\026\055\033\057\006\061\034\064\017\065\023\001" +
    "\002\000\032\003\027\007\016\013\025\021\015\024\035" +
    "\025\026\054\221\055\033\057\006\061\034\064\017\065" +
    "\023\001\002\000\004\057\222\001\002\000\004\026\223" +
    "\001\002\000\026\004\043\005\040\006\044\007\047\010" +
    "\052\017\042\020\045\026\046\031\041\043\051\001\002" +
    "\000\034\027\225\030\061\031\056\036\064\040\060\041" +
    "\065\042\063\043\067\045\066\046\054\047\055\056\057" +
    "\062\062\001\002\000\004\011\226\001\002\000\034\002" +
    "\uffdf\003\uffdf\007\uffdf\013\uffdf\021\uffdf\024\uffdf\025\uffdf" +
    "\054\uffdf\055\uffdf\057\uffdf\061\uffdf\064\uffdf\065\uffdf\001" +
    "\002\000\004\030\232\001\002\000\004\031\231\001\002" +
    "\000\034\002\uffd9\003\uffd9\007\uffd9\013\uffd9\021\uffd9\024" +
    "\uffd9\025\uffd9\054\uffd9\055\uffd9\057\uffd9\061\uffd9\064\uffd9" +
    "\065\uffd9\001\002\000\034\002\uffda\003\uffda\007\uffda\013" +
    "\uffda\021\uffda\024\uffda\025\uffda\054\uffda\055\uffda\057\uffda" +
    "\061\uffda\064\uffda\065\uffda\001\002\000\026\004\043\005" +
    "\040\006\044\007\047\010\052\017\042\020\045\026\046" +
    "\031\041\043\051\001\002\000\034\027\235\030\061\031" +
    "\056\036\064\040\060\041\065\042\063\043\067\045\066" +
    "\046\054\047\055\056\057\062\062\001\002\000\004\053" +
    "\236\001\002\000\030\003\027\007\016\013\025\021\015" +
    "\024\035\025\026\055\033\057\006\061\034\064\017\065" +
    "\023\001\002\000\032\003\027\007\016\013\025\021\015" +
    "\024\035\025\026\054\240\055\033\057\006\061\034\064" +
    "\017\065\023\001\002\000\036\002\uffe9\003\uffe9\007\uffe9" +
    "\013\uffe9\021\uffe9\024\uffe9\025\uffe9\054\uffe9\055\uffe9\057" +
    "\uffe9\060\241\061\uffe9\064\uffe9\065\uffe9\001\002\000\006" +
    "\021\015\053\242\001\002\000\030\003\027\007\016\013" +
    "\025\021\015\024\035\025\026\055\033\057\006\061\034" +
    "\064\017\065\023\001\002\000\034\002\uffe7\003\uffe7\007" +
    "\uffe7\013\uffe7\021\uffe7\024\uffe7\025\uffe7\054\uffe7\055\uffe7" +
    "\057\uffe7\061\uffe7\064\uffe7\065\uffe7\001\002\000\032\003" +
    "\027\007\016\013\025\021\015\024\035\025\026\054\245" +
    "\055\033\057\006\061\034\064\017\065\023\001\002\000" +
    "\034\002\uffe8\003\uffe8\007\uffe8\013\uffe8\021\uffe8\024\uffe8" +
    "\025\uffe8\054\uffe8\055\uffe8\057\uffe8\061\uffe8\064\uffe8\065" +
    "\uffe8\001\002\000\004\012\247\001\002\000\014\014\203" +
    "\015\201\016\200\022\202\023\204\001\002\000\006\011" +
    "\252\036\251\001\002\000\026\004\043\005\040\006\044" +
    "\007\047\010\052\017\042\020\045\026\253\031\041\043" +
    "\051\001\002\000\034\002\uffed\003\uffed\007\uffed\013\uffed" +
    "\021\uffed\024\uffed\025\uffed\054\uffed\055\uffed\057\uffed\061" +
    "\uffed\064\uffed\065\uffed\001\002\000\040\004\043\005\040" +
    "\006\044\007\047\010\052\014\203\015\201\016\200\017" +
    "\042\020\045\022\202\023\204\026\046\031\041\043\051" +
    "\001\002\000\034\011\255\030\061\031\056\036\064\040" +
    "\060\041\065\042\063\043\067\045\066\046\054\047\055" +
    "\056\057\062\062\001\002\000\034\002\uffee\003\uffee\007" +
    "\uffee\013\uffee\021\uffee\024\uffee\025\uffee\054\uffee\055\uffee" +
    "\057\uffee\061\uffee\064\uffee\065\uffee\001\002\000\004\027" +
    "\257\001\002\000\026\004\043\005\040\006\044\007\047" +
    "\010\052\017\042\020\045\026\046\031\041\043\051\001" +
    "\002\000\034\011\261\030\061\031\056\036\064\040\060" +
    "\041\065\042\063\043\067\045\066\046\054\047\055\056" +
    "\057\062\062\001\002\000\034\002\uffea\003\uffea\007\uffea" +
    "\013\uffea\021\uffea\024\uffea\025\uffea\054\uffea\055\uffea\057" +
    "\uffea\061\uffea\064\uffea\065\uffea\001\002\000\026\004\043" +
    "\005\040\006\044\007\047\010\052\017\042\020\045\026" +
    "\046\031\041\043\051\001\002\000\034\027\264\030\061" +
    "\031\056\036\064\040\060\041\065\042\063\043\067\045" +
    "\066\046\054\047\055\056\057\062\062\001\002\000\004" +
    "\053\265\001\002\000\030\003\027\007\016\013\025\021" +
    "\015\024\035\025\026\055\033\057\006\061\034\064\017" +
    "\065\023\001\002\000\032\003\027\007\016\013\025\021" +
    "\015\024\035\025\026\054\267\055\033\057\006\061\034" +
    "\064\017\065\023\001\002\000\034\002\uffe0\003\uffe0\007" +
    "\uffe0\013\uffe0\021\uffe0\024\uffe0\025\uffe0\054\uffe0\055\uffe0" +
    "\057\uffe0\061\uffe0\064\uffe0\065\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\042\002\035\003\010\004\003\005\021\006" +
    "\006\007\020\010\030\011\023\013\011\014\031\016\004" +
    "\017\027\020\017\021\013\022\012\026\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\126\005\021\006" +
    "\006\007\020\010\030\011\023\013\011\014\031\016\004" +
    "\017\027\020\017\021\013\022\012\026\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\112\001\001\000\004\012" +
    "\111\001\001\000\004\012\107\001\001\000\004\012\104" +
    "\001\001\000\004\012\102\001\001\000\004\012\100\001" +
    "\001\000\004\012\076\001\001\000\002\001\001\000\004" +
    "\012\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\070\001\001\000\002\001\001\000\004\012\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\114\001\001\000\002\001\001\000\010\012" +
    "\121\023\117\024\116\001\001\000\002\001\001\000\006" +
    "\012\121\024\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\125" +
    "\004\003\005\021\006\006\007\020\010\030\011\023\013" +
    "\011\014\031\016\004\017\027\020\017\021\013\022\012" +
    "\026\007\001\001\000\036\004\126\005\021\006\006\007" +
    "\020\010\030\011\023\013\011\014\031\016\004\017\027" +
    "\020\017\021\013\022\012\026\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\133\004\003\005\021\006\006\007\020\010" +
    "\030\011\023\013\011\014\031\016\004\017\027\020\017" +
    "\021\013\022\012\026\007\001\001\000\036\004\126\005" +
    "\021\006\006\007\020\010\030\011\023\013\011\014\031" +
    "\016\004\017\027\020\017\021\013\022\012\026\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\144\004\003\005\021\006\006" +
    "\007\020\010\030\011\023\013\011\014\031\016\004\017" +
    "\027\020\017\021\013\022\012\026\007\001\001\000\036" +
    "\004\126\005\021\006\006\007\020\010\030\011\023\013" +
    "\011\014\031\016\004\017\027\020\017\021\013\022\012" +
    "\026\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\154\001\001\000\002\001\001\000\004\012\155\001" +
    "\001\000\002\001\001\000\004\015\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\163\004\003\005\021\006\006\007\020\010\030\011\023" +
    "\013\011\014\031\016\004\017\027\020\017\021\013\022" +
    "\012\026\007\001\001\000\036\004\126\005\021\006\006" +
    "\007\020\010\030\011\023\013\011\014\031\016\004\017" +
    "\027\020\017\021\013\022\012\026\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\175\001\001\000\006\012\147\025" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\217\004\003\005\021\006\006\007\020\010\030\011\023" +
    "\013\011\014\031\016\004\017\027\020\017\021\013\022" +
    "\012\026\007\001\001\000\036\004\126\005\021\006\006" +
    "\007\020\010\030\011\023\013\011\014\031\016\004\017" +
    "\027\020\017\021\013\022\012\026\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\236\004\003\005\021\006\006\007" +
    "\020\010\030\011\023\013\011\014\031\016\004\017\027" +
    "\020\017\021\013\022\012\026\007\001\001\000\036\004" +
    "\126\005\021\006\006\007\020\010\030\011\023\013\011" +
    "\014\031\016\004\017\027\020\017\021\013\022\012\026" +
    "\007\001\001\000\002\001\001\000\004\013\242\001\001" +
    "\000\040\003\243\004\003\005\021\006\006\007\020\010" +
    "\030\011\023\013\011\014\031\016\004\017\027\020\017" +
    "\021\013\022\012\026\007\001\001\000\002\001\001\000" +
    "\036\004\126\005\021\006\006\007\020\010\030\011\023" +
    "\013\011\014\031\016\004\017\027\020\017\021\013\022" +
    "\012\026\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\247\001\001\000\002\001\001\000\004\012" +
    "\253\001\001\000\002\001\001\000\006\012\147\025\255" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\265\004\003\005\021\006\006" +
    "\007\020\010\030\011\023\013\011\014\031\016\004\017" +
    "\027\020\017\021\013\022\012\026\007\001\001\000\036" +
    "\004\126\005\021\006\006\007\020\010\030\011\023\013" +
    "\011\014\031\016\004\017\027\020\017\021\013\022\012" +
    "\026\007\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente "+s.value, s.left, s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= CBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= CMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= CDOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PRINTLN ::= PRINT PARIZQ EXPRESION PARDER PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Prinln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(b, c, a, d,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES PYC 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionPorDefecto(b,a,c,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= ID IGUAL EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= ID IGUAL PARIZQ TIPOSVALORES PARDER EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CasteoAsignacion(a, c, b,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASTEO ::= TIPOMUTABILIDAD ID DOSPUNTOS TIPOSVALORES IGUAL PARIZQ TIPOSVALORES PARDER EXPRESION PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casteo(b, c, d, a, e,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new IfElse(a,b,c,aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SIF ::= IF PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER ELSE SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Elif(a,b,c,aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CMATCH ::= MATCH EXPRESION LLAVEIZQ INSTRUCCIONESMATCH LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> b = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Match(a,b,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CMATCH ::= MATCH EXPRESION LLAVEIZQ INSTRUCCIONESMATCH BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<ObjetoMatch> b = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new MatchDefault(a,b,c,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CMATCH ::= MATCH EXPRESION LLAVEIZQ BARRA IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new Default(a,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CMATCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSTRUCCIONESMATCH ::= INSTRUCCIONESMATCH SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ObjetoMatch> a = (LinkedList<ObjetoMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch b = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCIONESMATCH ::= SENTENCIASMATCH 
            {
              LinkedList<ObjetoMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ObjetoMatch a = (ObjetoMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIASMATCH ::= EXPRESION IGUAL MAYOR LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              ObjetoMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ObjetoMatch(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIASMATCH",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CWHILE ::= WHILE PARIZQ EXPRESION PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CDOWHILE ::= DO LLAVEIZQ INSTRUCCIONES LLAVEDER WHILE PARIZQ EXPRESION PARDER PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDOWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CFOR ::= FOR PARIZQ ASIGNACION EXPRESION PYC ACTUALIZAR_FOR PARDER LLAVEIZQ INSTRUCCIONES LLAVEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ACTUALIZAR_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ACTUALIZAR_FOR ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Incremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ACTUALIZAR_FOR ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Decremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZAR_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INCREMENTO ::= ID MAS MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Incremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECREMENTO ::= ID MENOS MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=new Decremento(a,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CBREAK ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CBREAK",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOSVALORES ::= ENTERO 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.INT);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOSVALORES ::= DECIMAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.DOUBLE);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOSVALORES ::= CADENA 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.STRING);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOSVALORES ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.BOOLEAN);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOSVALORES ::= CARACTERES 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(TipoDeDato.CHAR);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOSVALORES",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPOMUTABILIDAD ::= VAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOMUTABILIDAD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPOMUTABILIDAD ::= CONST 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOMUTABILIDAD",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, SimbolosAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION MULTIPLICACION MULTIPLICACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesAritmeticas(a, b, SimbolosAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.IGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION NEGACION IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.NOIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MAYOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MAYORIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MENOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.MENORIGUAL,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION AND AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.AND,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION OR OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.OR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,b,SimbolosRelacionales.XOR,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= NEGACION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OperacionesRelacionales(a,SimbolosRelacionales.NOT,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= INT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(Integer.parseInt(a), new Tipo(TipoDeDato.INT), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= DOUBLE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(new Double(a), new Tipo(TipoDeDato.DOUBLE), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= STRING 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.STRING), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= TRUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(true, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= FALSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(false, new Tipo(TipoDeDato.BOOLEAN), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= CHAR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new DatoNativo(a, new Tipo(TipoDeDato.CHAR), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= PARIZQ EXPRESION PARDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
